Let's go back to my question at the beginning of this conversation. I will remind you: Wikipedia describes the Ford Johnson algorithm this way:

"Merge-insertion sort performs the following steps, on an input X of n elements:[6]
1. Group the elements of X into ⌊ n / 2 ⌋ pairs of elements, arbitrarily, leaving one element unpaired if there is an odd number of elements.
2. Perform ⌊ n / 2 ⌋ comparisons, one per pair, to determine the larger of the two elements in each pair.
3. Recursively sort the ⌊ n / 2 ⌋ larger elements from each pair, creating a sorted sequence S of ⌊ n / 2 ⌋ of the input elements, in ascending order, using the merge-insertion sort.
4. Insert at the start of S the element that was paired with the first and smallest element of S .
5. Insert the remaining ⌈ n / 2 ⌉ − 1 elements of X ∖ S into S , one at a time, with a specially chosen insertion ordering described below. Use binary search in subsequences of S (as described below) to determine the position at which each element should be inserted"

Beside this explanation there is an animated gif showing graphically in bar charts the algorithm's behaviour. These are the steps represented in each frame of the animated gif (the text is literally taken from the frames):
- The initial sequence is: { 6, 14, 12, 5, 1, 3, 7, 13, 8, 2, 15, 11, 10, 4, 9, 16 }
- First we compare the elements in groups of 2 and bring down the smaller one"
     larger = { 14, 12, 3, 13, 8, 15, 10, 16 }
     smaller = { 6, 5, 1, 7, 2, 11, 4, 9 }
- Now in a recursive way we sort the larger ones and put the smaller ones underneath it"
     larger =  { 3, 8, 10, 12, 13, 14, 15, 16 }
     smaller = { 1, 2,  4,  5,  7,  6, 11,  9 }
- Now we label the elements and start the Ford Johnson algorithm: 
     larger = { a1(3), a2(8), a3(10), a4(12), a5(13), a6(14), a7(15), a8(16) }
     smaller = { b1(1), b2(2), b3(4), b4(5), b5(7), b6(6), b7(11), b8(9) }
- We have a beginning sorted chain of elements:
     { b1, a1, a2 } = { 1, 3, 8 }
- Now we add 'b3' to the chain. In this way we will not have more than 3 comparisons as we already know its less than 'a3':
     { b1, a1, b3, a2 } = { 1, 3, 4, 8 }
- Then we add 'b2' to the chain. In this way we will not have more than three comparisons as it is compared to 'b1', 'a1' and possibly...
     { b1, b2, a1, b3, a2 } = { 1, 2, 3, 4, 8 }
- Now we can add 'a3' to the end of the chain as it is the greatest element until now
     { b1, b2, a1, b3, a2, a3 } = { 1, 2, 3, 4, 8, 10 }
- Now we add 'a4' to the end of the chain as we know it is the greatest element until now
     { b1, b2, a1, b3, a2, a3, a4 } = { 1, 2, 3, 4, 8, 10, 12 }
- Now we add 'b5' to the chain and we weill have under 7 elements in the chain to find extra's positions:
     { b1, b2, a1, b3, b5, a2, a3, a4 } = { 1, 2, 3, 4, 7, 8, 10, 12 }
- Now we add 'b4' to the chain and we will have under 7 elements in the chain to find 'b4' position:
     { b1, b2, a1, b3, b4, b5, a2, a3, a4 } = { 1, 2, 3, 4, 5, 7, 8, 10, 12}
- Now we add 'a5' to the end of the chain as we know it is the greatest element until now:
     { b1, b2, a1, b3, b4, b5, a2, a3, a4, a5 } = { 1, 2, 3, 4, 5, 7, 8, 10, 12, 13 }
- Now we add 'a6' to the end of the chain as we know it's the greatest element until now:
     { b1, b2, a1, b3, b4, b5, a2, a3, a4, a5, a6 } = { 1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14 }
- Now we add 'a7' to the end of the chain as we know it's the greatest element until now:
     { b1, b2, a1, b3, b4, b5, a2, a3, a4, a5, a6, a7 } = { 1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15 }
- Now we add 'b8' to the chain and we will have under 15 elements in the chain to find extra's position:
     { b1, b2, a1, b3, b4, b5, a2, b8, a3, a4, a5, a6, a7 } = { 1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15 }
- Now we add 'b7' to the chain and we will have under 15 elements in the chain to find extra's position:
     { b1, b2, a1, b3, b4, b5, a2, b8, a3, b7, a4, a5, a6, a7 } = { 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
- Now we add 'b6' to the chain and we will have under 15 elements in the chain to find 'b4' position:
     { b1, b2, a1, b3, b4, b6, b5, a2, b8, a3, b7, a4, a5, a6, a7 } = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
- Now we add 'a8' at the end of the chain as we know it is the greatest element:
     { b1, b2, a1, b3, b4, b6, b5, a2, b8, a3, b7, a4, a5, a6, a7, a8 } = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }

Finally, I send you a file with my own implementation of Ford Johnson algorithm and a flow chart showing step by step how I sort the same sequence of integers that is used in the wikipedia's animated gif. Although the sequence gets finally sorted anyway, comparing step by step my program with the wikipedia's example there are so many differences that it makes me wonder if we are actually using the same algorithm. Please enlighten me!!!
